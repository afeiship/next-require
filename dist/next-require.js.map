{"version":3,"sources":["next-require.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-require.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var findup = require('findup-sync');\n  var path = require('path');\n  var resolve = require('resolve')\n  var micromatch = require('micromatch');\n  var unique = require('array-unique');\n  var parentDir = path.dirname(module.parent.filename);\n  var SCOPE_RE = new RegExp('^@');\n  var SCOPE_DECOMPOSITION_RE = new RegExp('^@(.+)/(.+)');\n  var DEFAULT_RENAME_RE = /^next(-|\\.)/;\n  var DEFAULT_OPTIONS = {\n    config: findup('package.json', { cwd: parentDir }),\n    pattern: ['@feizheng/next-*', '!@feizheng/next-require'],\n    scope: ['dependencies', 'devDependencies'],\n    rename: function (inName) {\n      var name = inName.replace(DEFAULT_RENAME_RE, '');\n      return nx.camelize(name)\n    },\n    transform: function (name, target) {\n      return target;\n    }\n  };\n\n  // next packages:\n  require('@feizheng/next-arrayify');\n  require('@feizheng/next-camelize');\n\n  nx.require = function (inOptions) {\n    var options = nx.mix(null, DEFAULT_OPTIONS, inOptions)\n    var pattern = options.pattern;\n    var finalObject = {};\n    var scope = options.scope;\n    var config = options.config;\n    var requireFn = typeof config === 'string' ? function (name) {\n      var src = resolve.sync(name, { basedir: path.dirname(config) });\n      return require(src);\n    } : require;\n\n    var configObject = (typeof config === 'string') ? require(config) : config;\n    var names = scope.reduce(function (result, prop) {\n      return result.concat(\n        Object.keys(configObject[prop] || {})\n      );\n    }, []);\n\n    var list = unique(micromatch(names, pattern));\n\n    list.forEach(function (name) {\n      var targetName = SCOPE_RE.test(name) ? SCOPE_DECOMPOSITION_RE.exec(name)[2] : name;\n      var libName = options.rename(targetName);\n      finalObject[libName] = options.transform(\n        libName,\n        requireFn(name)\n      );\n    });\n\n\n    return finalObject;\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = nx.require;\n  }\n})();\n"]}